using System;
using System.IO;
using System.Net;

namespace SQLVulChecker
{
    internal static class OperationsHelper
    {
        internal static string[] SetArguments(string[] args)
        {
            var index = 0;
            var requestLine = args[0];
            if (args.Length == 1)
                index = requestLine.IndexOf('?');
            else
                File.ReadAllLines(args[0]);

            var parameters = requestLine.Remove(0, index).Split('&');
            foreach (var p in parameters) CheckVuln(p, requestLine);
            return parameters;
        }

        private static void CheckVuln(string param, string url)
        {
            var xSSCheck = url.Replace(param, $"{param}fd<xss>sa");
            var sqlCheck = url.Replace(param, $"{param}fd's'");
            foreach (var req in new[] {xSSCheck, sqlCheck})
            {
                var res = MakeHttpRequest(req);
                if (res.Contains("<xss>"))
                    Console.WriteLine(
                        $"A X-Scripting vulnerability was found @{'\n'}  {res.Substring(0, res.IndexOf('?'))}"
                        );
                else if (res.Contains(
                    "error in your SQL syntax"
                    ))
                    Console.WriteLine(
                        $"A SQL Injection vulnerability was found @{'\n'}  {res}"
                        );
                else
                    Console.WriteLine(
                        "No vulnerabilities found."
                        );
            }
        }

        private static string MakeHttpRequest(string req)
        {
            var request = (HttpWebRequest) WebRequest.Create(req);
            request.Method = "GET";
            string res;
            using var read =
                new StreamReader(request.GetResponse().GetResponseStream() ?? throw new InvalidOperationException());
            res = read.ReadToEnd();
            return res;
        }
    }
}